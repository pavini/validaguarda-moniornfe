#!/usr/bin/env python3
"""
Script para debugar especificamente o erro da API ValidaNFe
"""
import sys
from pathlib import Path
import requests
import time

# Adicionar caminho
sys.path.append('./monitor_nfe')

def debug_api_error():
    """Debug detalhado do erro da API"""
    
    print("=" * 70)
    print("üîç DEBUG DETALHADO DO ERRO DA API VALIDANFE")
    print("=" * 70)
    
    xml_file = Path("xml-problematico.xml")
    
    if not xml_file.exists():
        print("‚ùå Arquivo xml-problematico.xml n√£o encontrado")
        return
    
    # Pedir token
    print("Para investigar o erro da API, preciso de um token v√°lido.")
    print("Voc√™ pode:")
    print("1. Fornecer um token real para teste completo")
    print("2. Pressionar ENTER para usar um token de teste (mostrar√° erros esperados)")
    
    token = input("\nDigite o token da ValidaNFe API (ou ENTER para teste): ").strip()
    if not token:
        token = "TOKEN_DE_TESTE_PARA_DEBUG"
        print("‚ö†Ô∏è  Usando token de teste - erros s√£o esperados")
    else:
        print(f"‚úÖ Usando token real: {token[:20]}...")
    
    print(f"\n" + "=" * 70)
    print("üìã INFORMA√á√ïES DO ARQUIVO")
    print("=" * 70)
    
    # Informa√ß√µes b√°sicas do arquivo
    file_size = xml_file.stat().st_size
    print(f"üìÅ Arquivo: {xml_file.name}")
    print(f"üìè Tamanho: {file_size:,} bytes ({file_size / 1024:.2f} KB)")
    
    # Ler conte√∫do
    try:
        xml_content = xml_file.read_text(encoding='utf-8')
        print(f"‚úÖ Leitura UTF-8: OK ({len(xml_content):,} caracteres)")
    except Exception as e:
        print(f"‚ùå Erro na leitura UTF-8: {e}")
        return
    
    # Verificar estrutura b√°sica
    if '<nfeProc' in xml_content:
        print("‚úÖ Tipo: nfeProc (NFe processada)")
    elif '<NFe' in xml_content:
        print("‚úÖ Tipo: NFe simples")
    else:
        print("‚ö†Ô∏è  Tipo: N√£o identificado")
    
    # Extrair chave NFe
    import re
    nfe_key = None
    match = re.search(r'<chNFe>([^<]+)</chNFe>', xml_content)
    if match:
        nfe_key = match.group(1)
        print(f"üîë Chave NFe: {nfe_key}")
    else:
        match = re.search(r'Id="NFe(\d{44})"', xml_content)
        if match:
            nfe_key = match.group(1)
            print(f"üîë Chave NFe (via Id): {nfe_key}")
    
    print(f"\n" + "=" * 70)
    print("üöÄ TESTE DA API - REQUISI√á√ÉO DETALHADA")
    print("=" * 70)
    
    # Configura√ß√£o da API
    base_url = "https://api.validanfe.com"
    endpoint = "/GuardaNFe/EnviarXml"
    url = f"{base_url}{endpoint}"
    
    print(f"üåê URL: {url}")
    print(f"üîë Token: {token[:20]}{'...' if len(token) > 20 else ''}")
    print(f"üì¶ Method: POST")
    print(f"üìã Content-Type: multipart/form-data")
    
    # Preparar headers
    headers = {
        'X-API-KEY': token,
        'User-Agent': 'Monitor-NFe/1.0 (Python)'
    }
    
    print(f"\nüì§ HEADERS:")
    for key, value in headers.items():
        if key == 'X-API-KEY':
            print(f"   {key}: {value[:20]}...")
        else:
            print(f"   {key}: {value}")
    
    # Preparar arquivo
    files = {
        'xmlFile': (xml_file.name, xml_content, 'application/xml')
    }
    
    print(f"\nüìé MULTIPART FILES:")
    print(f"   Field: xmlFile")
    print(f"   Filename: {xml_file.name}")
    print(f"   Content-Type: application/xml")
    print(f"   Size: {len(xml_content):,} bytes")
    
    # Fazer a requisi√ß√£o
    print(f"\n" + "=" * 70)
    print("üîÑ ENVIANDO REQUISI√á√ÉO...")
    print("=" * 70)
    
    start_time = time.time()
    
    try:
        print("‚è≥ Fazendo requisi√ß√£o POST...")
        response = requests.post(url, files=files, headers=headers, timeout=30)
        
        end_time = time.time()
        response_time = (end_time - start_time) * 1000
        
        print(f"‚úÖ Requisi√ß√£o conclu√≠da em {response_time:.2f}ms")
        
    except requests.exceptions.Timeout:
        print("‚ùå TIMEOUT: A API n√£o respondeu em 30 segundos")
        print("   Poss√≠veis causas:")
        print("   - API sobrecarregada")
        print("   - Problemas de rede")
        print("   - Arquivo muito grande")
        return
        
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå ERRO DE CONEX√ÉO: {e}")
        print("   Poss√≠veis causas:")
        print("   - URL incorreta")
        print("   - API fora do ar")
        print("   - Problemas de DNS/rede")
        return
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERRO NA REQUISI√á√ÉO: {e}")
        return
        
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        return
    
    # Analisar resposta
    print(f"\n" + "=" * 70)
    print("üì• RESPOSTA DA API")
    print("=" * 70)
    
    print(f"üî¢ Status Code: {response.status_code}")
    print(f"‚è±Ô∏è  Tempo de resposta: {response_time:.2f}ms")
    
    # Headers de resposta
    print(f"\nüì• RESPONSE HEADERS:")
    for key, value in response.headers.items():
        print(f"   {key}: {value}")
    
    # Corpo da resposta
    print(f"\nüìÑ RESPONSE BODY:")
    if response.text:
        print(f"   Tamanho: {len(response.text)} caracteres")
        print(f"   Conte√∫do (primeiros 1000 chars):")
        print("   " + "-" * 50)
        print(response.text[:1000])
        print("   " + "-" * 50)
        
        if len(response.text) > 1000:
            print(f"   ... (+{len(response.text) - 1000} caracteres)")
    else:
        print("   (vazio)")
    
    # Tentar parsear JSON
    print(f"\nüîç AN√ÅLISE DA RESPOSTA:")
    
    if response.headers.get('content-type', '').startswith('application/json'):
        try:
            json_data = response.json()
            print("‚úÖ Resposta √© JSON v√°lido")
            import json
            print("üìã JSON formatado:")
            print(json.dumps(json_data, indent=2, ensure_ascii=False))
        except Exception as e:
            print(f"‚ùå Erro ao parsear JSON: {e}")
    else:
        print("‚ö†Ô∏è  Resposta n√£o √© JSON")
    
    # Interpretar status codes comuns
    print(f"\n" + "=" * 70)
    print("üß† INTERPRETA√á√ÉO DO STATUS CODE")
    print("=" * 70)
    
    if response.status_code == 200:
        print("‚úÖ 200 OK: Requisi√ß√£o bem-sucedida")
        print("   A NFe foi processada com sucesso pela API")
        
    elif response.status_code == 400:
        print("‚ùå 400 Bad Request: Dados inv√°lidos")
        print("   Poss√≠veis causas:")
        print("   - XML malformado")
        print("   - Campos obrigat√≥rios ausentes")
        print("   - Formato de dados incorreto")
        print("   - Valida√ß√µes de neg√≥cio da NFe falharam")
        
    elif response.status_code == 401:
        print("‚ùå 401 Unauthorized: Problema de autentica√ß√£o")
        print("   Poss√≠veis causas:")
        print("   - Token inv√°lido")
        print("   - Token expirado")
        print("   - Header X-API-KEY ausente ou incorreto")
        
    elif response.status_code == 403:
        print("‚ùå 403 Forbidden: Sem permiss√£o")
        print("   Poss√≠veis causas:")
        print("   - Token v√°lido mas sem permiss√µes para esta opera√ß√£o")
        print("   - Conta sem cr√©ditos")
        print("   - Tipo de NFe n√£o permitido para sua conta")
        
    elif response.status_code == 404:
        print("‚ùå 404 Not Found: Endpoint n√£o encontrado")
        print("   Poss√≠veis causas:")
        print("   - URL incorreta")
        print("   - Endpoint descontinuado")
        
    elif response.status_code == 409:
        print("‚ö†Ô∏è  409 Conflict: NFe j√° processada")
        print("   Esta NFe j√° foi enviada anteriormente")
        print("   Isso √© normal e pode ser considerado sucesso")
        
    elif response.status_code == 422:
        print("‚ùå 422 Unprocessable Entity: Dados inv√°lidos")
        print("   XML tem estrutura correta mas conte√∫do inv√°lido")
        
    elif response.status_code == 429:
        print("‚ö†Ô∏è  429 Too Many Requests: Rate limit")
        print("   Muitas requisi√ß√µes em pouco tempo")
        print("   Aguarde alguns minutos e tente novamente")
        
    elif response.status_code >= 500:
        print(f"‚ùå {response.status_code} Server Error: Erro do servidor")
        print("   Problema interno da API ValidaNFe")
        print("   Tente novamente mais tarde")
        
    else:
        print(f"‚ùì Status {response.status_code}: N√£o documentado")
    
    # Conclus√µes
    print(f"\n" + "=" * 70)
    print("üéØ CONCLUS√ïES E PR√ìXIMOS PASSOS")
    print("=" * 70)
    
    if response.status_code == 200:
        print("‚úÖ SUCESSO: A API funcionou corretamente")
        print("   O problema n√£o √© na comunica√ß√£o com a API")
        
    elif response.status_code == 409:
        print("‚úÖ NFe J√Å PROCESSADA: Isso √© esperado")
        print("   A NFe foi enviada com sucesso anteriormente")
        print("   O aplicativo deveria tratar isso como sucesso")
        
    elif response.status_code == 401:
        print("üîë PROBLEMA DE TOKEN:")
        if token == "TOKEN_DE_TESTE_PARA_DEBUG":
            print("   Use um token real da ValidaNFe para teste completo")
        else:
            print("   Verifique se o token est√° correto e ainda v√°lido")
            
    elif response.status_code == 400:
        print("üìã PROBLEMA NOS DADOS:")
        print("   Examine a resposta acima para detalhes espec√≠ficos do erro")
        print("   Pode ser um problema espec√≠fico com este XML")
        
    else:
        print("üîß PROBLEMA NA API OU CONFIGURA√á√ÉO:")
        print("   Verifique os detalhes da resposta acima")
        print("   Pode ser necess√°rio contatar o suporte da ValidaNFe")
    
    print(f"\nüìû Se precisar de suporte:")
    print("   - Documente o status code e resposta acima")
    print("   - Verifique a documenta√ß√£o da ValidaNFe API")
    print("   - Entre em contato com o suporte t√©cnico da ValidaNFe")

if __name__ == "__main__":
    debug_api_error()